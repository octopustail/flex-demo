/*  align-items属性
stretch属性，父亲元素有高度，子元素不设置高度或者高度设成auto
子元素有高度时候，可以用flex-start flex-end center
有文字时可以用 baseline
*/
.vater{
    background:rgb(190, 154, 154);
}

.son{
    background:rgb(246, 255, 206);
    margin: 10px;
}
.demo1>.vater{
    display: flex;
    height: 140px;
    justify-content: space-between;
    background:rgb(190, 154, 154);
    align-items: center;
}


    

.demo1 .son{
    width: 40px;
    height: 100px;

}
.demo1 .vater :first-child{
    height: 30px;
}
/* 
flex-wrap属性 
默认为nowrap

注意： 在这个时候如果子元素的min-content之和超过了父元素的width，则会发生溢出。 这里有英文，min-content是英文的长度。长度累计导致了溢出
*/
.demo2>.vater{
    display: flex;
    height: auto;
    flex-wrap: wrap;
    
}
.demo2 .son{
    width: 100px;
    height: 100px;
}
/*
    align-content属性
    垂直方向上有多跟轴时的排列方式 属性同justify-content(水平方向上的排列)
    跟align-items的区别： align-items 可以看作是在一个轴上上面的元素的排列方式

    注意用align-items和justify-content的时候，主轴的方向是row 还是 column
*/
.demo3 .vater{
    display: flex;
    height: auto;
    flex-wrap: wrap;
    height: 300px;
    align-content: flex-end;
    align-items: center;
}

.demo3 .son{
    width: 100px;
    height: 100px;
   
}



/*
    flex-grow 有剩余空间的时候的元素扩展 默认值为0
    flex-grow分配的值之和小于1的时候，那么有flex-grow不为0的元素分配到的扩展的宽度 = （容器宽度 - items的包含了margin的宽度）* flex-grow的份额
    flex-grow分配的值之和大于1的时候，那么有flex-grow不为0的元素分配到的扩展的宽度 = （容器宽度 - items的包含了margin的宽度）*  (它的flex-grow的值）/（总的flex-grow)的值

    如果设置了flex-grow的元素没有设置高度

    flex-shrink 和 flex-grow很相似 默认值为1

*/

/* 实现一个粘连页脚布局 就是将 body和html的高度设成100%占满整个屏幕，会伸缩的主空间的flex设置成1，页头也脚设置成0  */

.demo4{
    display: flex;
    justify-content: center;
}
.demo4 .vater{
    display: flex;
    flex-direction: column;
    width: 80%;
    justify-content: center;
    align-items: center;
}

.demo4 .son{
    height:100px;
    flex-grow: 0;
    width:100px;
    margin:10px;
}

.son-grow{
    width:100px;
    height: auto;
    background: #fff;
    margin:10px;
    flex-grow: 1;
}

.expand{
    height: 500px;
    background:#333;
    display: block;
}

/* 一个absolute的例子*/

.demo5 .son{
    position: relative;
    width:300px;
    height:300px;
}

.demo5 .pos-absolute{
    background: #fff;
    position: absolute;
}

/* grid */
.demo6 .vater{
    display: flex;
}
.demo6 .son{
    height:100px;
    flex:1;
}

/* 
    随屏幕宽度变化的流式布局
媒体查询的方法使得在480的屏幕宽度下显示3个元素。480以上显示4个元素
这里有一个知识点是box-sizng的设置。content-box的尺寸就是内容的尺寸，不包括padding和border。这样以来设置百分比的时候就会有问题。
所以使用border-box， 尺寸为内容尺寸+padding+border。设置百分比的时候计算就会方便一点。另一方面，如果有margin的值的话，设置百分比的时候也需要考虑margin的值。
*/
.inside{
    height:80px;
    width: 100px;
    background:#396;
    box-sizing: border-box;
    margin: 0 auto;
    
}
@media (max-width: 480px){
.demo7 .vater{
    display: flex;
    flex-wrap: wrap;
    
}
.demo7 .son{
    margin:0;
    height:100px;
    flex: 0 0 33.3%;
    border: 1px solid #333;
    box-sizing:border-box;
}
}
@media(min-width:480px){
    .demo7 .vater{
        display: flex;
        flex-wrap: wrap;
        
    }
    .demo7 .son{
        margin:0;
        height:100px;
        width: 100px;
        width: 25%;
        border: 1px solid #333;
        box-sizing: border-box;
    }
}

/* 自适应的圣杯布局 */
.demo8 .vater{
    display: flex;
    flex-direction: column;
    min-height: 900px;
}

.demo8 .grid-header{
    height: 80px;
    background: rgb(105, 145, 233);
    flex-grow:0;
}
.demo8 .grid-container{
    width: 100%;
    background: rgb(35, 66, 131);
    flex-grow:1;
    display: flex;
}
.column-left{
    background:rgb(230, 142, 215);
    flex:0 0 20%;
}
.column-right{
    background: rgb(221, 119, 119);
    flex:0 0 20%;
}
.column-center{
    background:#395;
    flex: 1 0 60%;
}
.demo8 .grid-footer{
    height: 80px;
    background: #ff0;
    flex-grow:0;
}

@media (max-width:480px){
    .demo8 .grid-container{
        width: 100%;
        background: rgb(35, 66, 131);
        flex-grow:1;
        display: flex;
        flex-direction: column;
    }

    .column-center,
    .column-left,
    .column-right{
        flex: auto;
    }
}